import { Telegraf, Context } from 'telegraf';
import { message } from 'telegraf/filters';
import axios from 'axios';
import { databaseService } from '../services/database';
import { minioService } from '../services/minio';
import { openaiService } from '../services/openai';
import { replicateService } from '../services/replicate';
import { paymentService } from '../services/payment';
import { GenerationStatus } from '@prisma/client';

interface BotContext extends Context {
  user?: {
    id: number;
    telegramId: string;
  };
}

export class TelegramBot {
  private bot: Telegraf<BotContext>;

  constructor() {
    if (!process.env.TELEGRAM_BOT_TOKEN) {
      throw new Error('TELEGRAM_BOT_TOKEN is required');
    }

    this.bot = new Telegraf<BotContext>(process.env.TELEGRAM_BOT_TOKEN);
    this.setupMiddleware();
    this.setupCommands();
    this.setupHandlers();
  }

  private setupMiddleware(): void {
    // User middleware to find or create user
    this.bot.use(async (ctx, next) => {
      if (ctx.from) {
        const user = await databaseService.findOrCreateUser(
          ctx.from.id.toString(),
          {
            username: ctx.from.username,
            firstName: ctx.from.first_name,
            lastName: ctx.from.last_name,
          }
        );
        ctx.user = {
          id: user.id,
          telegramId: user.telegramId,
        };
      }
      return next();
    });
  }

  private setupCommands(): void {
    // Start command
    this.bot.command('start', async (ctx) => {
      const welcomeMessage = `
üåπ *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Romantic Video Bot!* üåπ

–≠—Ç–æ—Ç –±–æ—Ç —Å–æ–∑–¥–∞–µ—Ç —Ä–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–µ –≤–∏–¥–µ–æ –∏–∑ –≤–∞—à–∏—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π! 

*–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:*
1Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /generate
2Ô∏è‚É£ –ó–∞–≥—Ä—É–∑–∏—Ç–µ 2 —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ (—Å–µ–±—è –∏ –ø–∞—Ä—Ç–Ω–µ—Ä–∞)
3Ô∏è‚É£ –ü–æ–ª—É—á–∏—Ç–µ –∫—Ä–∞—Å–∏–≤–æ–µ —Ä–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–µ –≤–∏–¥–µ–æ!

*–õ–∏–º–∏—Ç—ã:*
‚Ä¢ 1 –±–µ—Å–ø–ª–∞—Ç–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è
‚Ä¢ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∑–∞ Telegram Stars ‚≠ê

*–ö–æ–º–∞–Ω–¥—ã:*
/generate - –ù–∞—á–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –≤–∏–¥–µ–æ
/stats - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
/buy - –ö—É–ø–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
/help - –ü–æ–º–æ—â—å
/reset - –°–±—Ä–æ—Å–∏—Ç—å —Ç–µ–∫—É—â—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é

–ì–æ—Ç–æ–≤—ã —Å–æ–∑–¥–∞—Ç—å —á—Ç–æ-—Ç–æ –≤–æ–ª—à–µ–±–Ω–æ–µ? ‚ú®
      `;

      await ctx.reply(welcomeMessage, { parse_mode: 'Markdown' });
    });

    // Help command
    this.bot.command('help', async (ctx) => {
      const helpMessage = `
*–ü–æ–º–æ—â—å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞* üìñ

*–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*
/start - –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
/generate - –ù–∞—á–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ —Ä–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤–∏–¥–µ–æ
/stats - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö –≥–µ–Ω–µ—Ä–∞—Ü–∏–π
/buy - –ö—É–ø–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∑–∞ Stars
/reset - –û—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é

*–ö–∞–∫ —Å–æ–∑–¥–∞—Ç—å –≤–∏–¥–µ–æ:*
1. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /generate
2. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–µ—Ä–≤–æ–µ —Ñ–æ—Ç–æ
3. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤—Ç–æ—Ä–æ–µ —Ñ–æ—Ç–æ
4. –î–æ–∂–¥–∏—Ç–µ—Å—å –æ–±—Ä–∞–±–æ—Ç–∫–∏ (–º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç)
5. –ü–æ–ª—É—á–∏—Ç–µ –≥–æ—Ç–æ–≤–æ–µ —Ä–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–µ –≤–∏–¥–µ–æ!

*–í–∞–∂–Ω–æ:*
‚Ä¢ –§–æ—Ç–æ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–µ—Ç–∫–∏–º–∏ –∏ —Ö–æ—Ä–æ—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞
‚Ä¢ –ù–∞ —Ñ–æ—Ç–æ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤–∏–¥–Ω—ã –ª–∏—Ü–∞ –ª—é–¥–µ–π
‚Ä¢ –ë–æ—Ç —Å–æ–∑–¥–∞–µ—Ç —Å–µ–º–µ–π–Ω–æ-–¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç

–ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å? –ù–∞–ø–∏—à–∏—Ç–µ @support
      `;

      await ctx.reply(helpMessage, { parse_mode: 'Markdown' });
    });

    // Stats command
    this.bot.command('stats', async (ctx) => {
      if (!ctx.user) return;

      try {
        const stats = await databaseService.getUserStats(ctx.user.id);
        const statsMessage = `
üìä *–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*

üé¨ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π: ${stats.generationsUsed}/${stats.totalAllowed}
üíé –ö—É–ø–ª–µ–Ω–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π: ${stats.paidGenerations}
üÜì –û—Å—Ç–∞–ª–æ—Å—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö: ${Math.max(0, 1 - stats.generationsUsed)}

${stats.generationsUsed >= stats.totalAllowed ? 
  '‚ö†Ô∏è –õ–∏–º–∏—Ç –∏—Å—á–µ—Ä–ø–∞–Ω! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /buy –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –≥–µ–Ω–µ—Ä–∞—Ü–∏–π.' : 
  '‚úÖ –£ –≤–∞—Å –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏!'}
        `;

        await ctx.reply(statsMessage, { parse_mode: 'Markdown' });
      } catch (error) {
        await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏');
      }
    });

    // Generate command
    this.bot.command('generate', async (ctx) => {
      if (!ctx.user) return;

      try {
        // Check if user can generate
        const canGenerate = await databaseService.canUserGenerate(ctx.user.id);
        if (!canGenerate) {
          await ctx.reply(
            '‚ùå –£ –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /buy –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö.',
            {
              reply_markup: {
                inline_keyboard: [[
                  { text: 'üíé –ö—É–ø–∏—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏', callback_data: 'buy_generations' }
                ]]
              }
            }
          );
          return;
        }

        // Check if user has active generation
        const activeGeneration = await databaseService.getActiveGeneration(ctx.user.id);
        if (activeGeneration) {
          await ctx.reply(
            '‚ö†Ô∏è –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /reset —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ –∏–ª–∏ –¥–æ–∂–¥–∏—Ç–µ—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–π.',
            {
              reply_markup: {
                inline_keyboard: [[
                  { text: 'üîÑ –°–±—Ä–æ—Å–∏—Ç—å', callback_data: 'reset_generation' }
                ]]
              }
            }
          );
          return;
        }

        // Create new generation
        await databaseService.createGeneration(ctx.user.id);

        const generateMessage = `
üé¨ *–ù–∞—á–∏–Ω–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Ä–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤–∏–¥–µ–æ!*

üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ *–ø–µ—Ä–≤–æ–µ —Ñ–æ—Ç–æ* (—Å–µ–±—è –∏–ª–∏ –ø–∞—Ä—Ç–Ω–µ—Ä–∞)

*–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —Ñ–æ—Ç–æ:*
‚Ä¢ –ß–µ—Ç–∫–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ª–∏—Ü–∞
‚Ä¢ –•–æ—Ä–æ—à–µ–µ –æ—Å–≤–µ—â–µ–Ω–∏–µ
‚Ä¢ –§–æ—Ä–º–∞—Ç: JPG, PNG
‚Ä¢ –†–∞–∑–º–µ—Ä: –¥–æ 20MB

–ü–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ —Ñ–æ—Ç–æ —è –ø–æ–ø—Ä–æ—à—É –≤—Ç–æ—Ä–æ–µ! üì∑‚ú®
        `;

        await ctx.reply(generateMessage, { parse_mode: 'Markdown' });
      } catch (error) {
        console.error('Error in generate command:', error);
        await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
      }
    });

    // Reset command
    this.bot.command('reset', async (ctx) => {
      if (!ctx.user) return;

      try {
        const activeGeneration = await databaseService.getActiveGeneration(ctx.user.id);
        if (!activeGeneration) {
          await ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–ª—è —Å–±—Ä–æ—Å–∞.');
          return;
        }

        await databaseService.updateGeneration(activeGeneration.id, {
          status: GenerationStatus.ERROR
        });

        await ctx.reply('‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–±—Ä–æ—à–µ–Ω–∞! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é —Å –ø–æ–º–æ—â—å—é /generate');
      } catch (error) {
        console.error('Error in reset command:', error);
        await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏');
      }
    });

    // Buy command
    this.bot.command('buy', async (ctx) => {
      const buyMessage = `
üíé *–ö—É–ø–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏*

*–¢–∞—Ä–∏—Ñ—ã:*
üåü 1 –≥–µ–Ω–µ—Ä–∞—Ü–∏—è - 50 Stars
üåü 5 –≥–µ–Ω–µ—Ä–∞—Ü–∏–π - 225 Stars (—Å–∫–∏–¥–∫–∞ 10%)
üåü 10 –≥–µ–Ω–µ—Ä–∞—Ü–∏–π - 400 Stars (—Å–∫–∏–¥–∫–∞ 20%)
üåü 25 –≥–µ–Ω–µ—Ä–∞—Ü–∏–π - 875 Stars (—Å–∫–∏–¥–∫–∞ 30%)

–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–∫–µ—Ç:
      `;

      await ctx.reply(buyMessage, {
        parse_mode: 'Markdown',
        reply_markup: {
          inline_keyboard: [
            [{ text: 'üåü 1 –≥–µ–Ω–µ—Ä–∞—Ü–∏—è (50 Stars)', callback_data: 'buy_1_50' }],
            [{ text: 'üåü 5 –≥–µ–Ω–µ—Ä–∞—Ü–∏–π (225 Stars)', callback_data: 'buy_5_225' }],
            [{ text: 'üåü 10 –≥–µ–Ω–µ—Ä–∞—Ü–∏–π (400 Stars)', callback_data: 'buy_10_400' }],
            [{ text: 'üåü 25 –≥–µ–Ω–µ—Ä–∞—Ü–∏–π (875 Stars)', callback_data: 'buy_25_875' }],
          ]
        }
      });
    });
  }

  private setupHandlers(): void {
    // Photo handler
    this.bot.on(message('photo'), async (ctx) => {
      if (!ctx.user) return;

      try {
        const activeGeneration = await databaseService.getActiveGeneration(ctx.user.id);
        if (!activeGeneration) {
          await ctx.reply('‚ùå –°–Ω–∞—á–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /generate —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –≤–∏–¥–µ–æ!');
          return;
        }

        if (activeGeneration.status !== GenerationStatus.WAITING_PHOTOS) {
          await ctx.reply('‚è≥ –í–∞—à–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —É–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–∂–¥–∏—Ç–µ—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.');
          return;
        }

        // Get the largest photo
        const photo = ctx.message.photo[ctx.message.photo.length - 1];
        
        // Download photo from Telegram
        const fileLink = await ctx.telegram.getFileLink(photo.file_id);
        const response = await axios.get(fileLink.href, { responseType: 'arraybuffer' });
        const photoBuffer = Buffer.from(response.data);

        // Upload to MinIO
        const photoUrl = await minioService.uploadFile(
          photoBuffer,
          `photo_${Date.now()}.jpg`,
          'image/jpeg'
        );

        if (!activeGeneration.photo1Url) {
          // First photo
          await databaseService.updateGeneration(activeGeneration.id, {
            photo1Url: photoUrl
          });

          await ctx.reply(
            '‚úÖ –ü–µ—Ä–≤–æ–µ —Ñ–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω–æ!\n\nüì∏ –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ *–≤—Ç–æ—Ä–æ–µ —Ñ–æ—Ç–æ*',
            { parse_mode: 'Markdown' }
          );
        } else if (!activeGeneration.photo2Url) {
          // Second photo - start processing
          await databaseService.updateGeneration(activeGeneration.id, {
            photo2Url: photoUrl,
            status: GenerationStatus.PROCESSING_PHOTOS
          });

          await ctx.reply(
            '‚úÖ –í—Ç–æ—Ä–æ–µ —Ñ–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω–æ!\n\nüé® –ù–∞—á–∏–Ω–∞—é —Å–æ–∑–¥–∞–Ω–∏–µ —Ä–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–π —Å—Ü–µ–Ω—ã... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç.',
            { parse_mode: 'Markdown' }
          );

          // Start processing in background
          this.processGeneration(ctx.user.id, activeGeneration.id, ctx);
        } else {
          await ctx.reply('‚ùå –í—ã —É–∂–µ –∑–∞–≥—Ä—É–∑–∏–ª–∏ –æ–±–∞ —Ñ–æ—Ç–æ. –î–æ–∂–¥–∏—Ç–µ—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /reset');
        }
      } catch (error) {
        console.error('Error handling photo:', error);
        await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
      }
    });

    // Callback query handler for buttons
    this.bot.on('callback_query', async (ctx) => {
      if (!ctx.user || !ctx.callbackQuery || !('data' in ctx.callbackQuery)) return;

      const data = ctx.callbackQuery.data;

      try {
        if (data === 'reset_generation') {
          const activeGeneration = await databaseService.getActiveGeneration(ctx.user.id);
          if (activeGeneration) {
            await databaseService.updateGeneration(activeGeneration.id, {
              status: GenerationStatus.ERROR
            });
            await ctx.editMessageText('‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–±—Ä–æ—à–µ–Ω–∞! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /generate –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π.');
          }
        } else if (data.startsWith('buy_')) {
          // Handle purchase
          const [, generations, stars] = data.split('_');
          await this.handlePurchase(ctx, parseInt(generations), parseInt(stars));
        }

        await ctx.answerCbQuery();
      } catch (error) {
        console.error('Error handling callback query:', error);
        await ctx.answerCbQuery('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
      }
    });

    // Payment handlers
    this.bot.on('pre_checkout_query', async (ctx) => {
      await paymentService.handlePreCheckoutQuery(ctx);
    });

    this.bot.on(message('successful_payment'), async (ctx) => {
      await paymentService.handleSuccessfulPayment(ctx);
    });
  }

  private async processGeneration(userId: number, generationId: string, ctx: BotContext): Promise<void> {
    try {
      // Get generation data
      const generation = await databaseService.updateGeneration(generationId, {
        status: GenerationStatus.GENERATING_IMAGE
      });

      if (!generation.photo1Url || !generation.photo2Url) {
        throw new Error('Missing photo URLs');
      }

      // Generate romantic image directly
      await ctx.reply('üé® –°–æ–∑–¥–∞—é —Ä–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫—É—é —Å—Ü–µ–Ω—É...');
      
      const romanticImageUrl = await openaiService.generateRomanticImage(
        generation.photo1Url,
        generation.photo2Url
      );

      await databaseService.updateGeneration(generationId, {
        romanticImageUrl,
        status: GenerationStatus.GENERATING_VIDEO
      });

      await ctx.reply('üé¨ –°–æ–∑–¥–∞—é —Ä–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–µ –≤–∏–¥–µ–æ... –≠—Ç–æ –∑–∞–π–º–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç.');

      // Generate video
      const videoUrl = await replicateService.generateRomanticVideo(romanticImageUrl);

      // Complete generation
      await databaseService.updateGeneration(generationId, {
        videoUrl,
        status: GenerationStatus.COMPLETED
      });

      // Increment user generations
      await databaseService.incrementUserGenerations(userId);

      // Send result
      await ctx.reply('‚ú® –í–∞—à–µ —Ä–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–µ –≤–∏–¥–µ–æ –≥–æ—Ç–æ–≤–æ! ‚ú®');
      await ctx.replyWithVideo(videoUrl, {
        caption: 'üíï –†–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–µ –≤–∏–¥–µ–æ —Å–æ–∑–¥–∞–Ω–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è –≤–∞—Å!\n\n–ü–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å? –ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å –¥—Ä—É–∑—å—è–º–∏! üåπ',
        reply_markup: {
          inline_keyboard: [[
            { text: 'üé¨ –°–æ–∑–¥–∞—Ç—å –µ—â–µ –æ–¥–Ω–æ', callback_data: 'generate_new' },
            { text: 'üíé –ö—É–ø–∏—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏', callback_data: 'buy_generations' }
          ]]
        }
      });

    } catch (error) {
      console.error('Error processing generation:', error);
      
      await databaseService.updateGeneration(generationId, {
        status: GenerationStatus.ERROR
      });

      await ctx.reply(
        '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≤–∏–¥–µ–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ —Å –ø–æ–º–æ—â—å—é /generate\n\n–ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ –ø–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.'
      );
    }
  }

  private async handlePurchase(ctx: BotContext, generations: number, stars: number): Promise<void> {
    if (!ctx.user) return;

    try {
      // Create payment record
      const paymentId = await databaseService.createPayment(ctx.user.id, stars, generations);

      // Send invoice
      await ctx.replyWithInvoice({
        title: `${generations} –≥–µ–Ω–µ—Ä–∞—Ü–∏–π –≤–∏–¥–µ–æ`,
        description: `–ü–æ–∫—É–ø–∫–∞ ${generations} –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –≥–µ–Ω–µ—Ä–∞—Ü–∏–π —Ä–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏—Ö –≤–∏–¥–µ–æ`,
        payload: paymentId,
        provider_token: '', // Empty for Telegram Stars
        currency: 'XTR', // Telegram Stars currency
        prices: [{ label: `${generations} –≥–µ–Ω–µ—Ä–∞—Ü–∏–π`, amount: stars }],
      });

    } catch (error) {
      console.error('Error handling purchase:', error);
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  }

  public start(): void {
    this.bot.launch();
    console.log('ü§ñ Telegram bot started successfully!');

    // Graceful shutdown
    process.once('SIGINT', () => this.bot.stop('SIGINT'));
    process.once('SIGTERM', () => this.bot.stop('SIGTERM'));
  }
}

// Export only the class, instance will be created in main()
