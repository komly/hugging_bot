import { Context } from 'telegraf';
import { databaseService } from './database';

export class PaymentService {
  async handlePreCheckoutQuery(ctx: Context): Promise<void> {
    if (!ctx.preCheckoutQuery) return;

    try {
      // Validate the payment
      const paymentId = ctx.preCheckoutQuery.invoice_payload;
      
      // You can add additional validation here
      // For now, we'll approve all payments
      
      await ctx.answerPreCheckoutQuery(true);
    } catch (error) {
      console.error('Error in pre-checkout query:', error);
      await ctx.answerPreCheckoutQuery(false, '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–ª–∞—Ç–µ–∂–∞');
    }
  }

  async handleSuccessfulPayment(ctx: Context): Promise<void> {
    if (!ctx.message || !('successful_payment' in ctx.message) || !ctx.from) return;

    try {
      const payment = ctx.message.successful_payment;
      const paymentId = payment.invoice_payload;
      const telegramPaymentId = payment.telegram_payment_charge_id;

      // Complete the payment in database
      await databaseService.completePayment(paymentId, telegramPaymentId);

      // Get user stats to show updated info
      const user = await databaseService.findOrCreateUser(ctx.from.id.toString(), {
        username: ctx.from.username,
        firstName: ctx.from.first_name,
        lastName: ctx.from.last_name,
      });

      const stats = await databaseService.getUserStats(user.id);

      const successMessage = `
‚úÖ *–ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω!*

üíé –ì–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã –Ω–∞ –≤–∞—à —Å—á–µ—Ç
üìä –î–æ—Å—Ç—É–ø–Ω–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π: ${stats.totalAllowed - stats.generationsUsed}

–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å –±–æ–ª—å—à–µ —Ä–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏—Ö –≤–∏–¥–µ–æ! 
–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /generate —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å üé¨‚ú®
      `;

      await ctx.reply(successMessage, {
        parse_mode: 'Markdown',
        reply_markup: {
          inline_keyboard: [[
            { text: 'üé¨ –°–æ–∑–¥–∞—Ç—å –≤–∏–¥–µ–æ', callback_data: 'generate_new' }
          ]]
        }
      });

    } catch (error) {
      console.error('Error handling successful payment:', error);
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–ª–∞—Ç–µ–∂–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.');
    }
  }
}

export const paymentService = new PaymentService();
